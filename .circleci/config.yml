version: 2.1

jobs:
  run_tests:
    docker:
      - image: node:22-bookworm
      - image: postgres
        environment:
          POSTGRES_DB: "zosia"
          POSTGRES_USER: "zosia"
          POSTGRES_PASSWORD: "zosia"
    steps:
      - checkout
      - run:
          name: Install python3 and pip
          command: DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install --no-install-recommends -y python3 python3-pip
      - run:
          name: Install requirements
          command: |
            pip3 install --break-system-packages -r app/requirements.txt
            pip3 install --break-system-packages -r app/requirements.dev.txt
            cd app && npm install
      - run:
          name: Build frontend
          command: cd app && python3 manage.py generate_client_assets && python3 manage.py build
      - run:
          name: Run run test with coverage check
          command: cd app/server && coverage run --source='.' --omit='*/migrations/*,*/tests.py,*/__init__.py'  ../manage.py test --settings=server.settings.test
      - run:
          name: Run syntax check
          command: flake8 --exclude=migrations --max-line-length=120 app/server || true
      - run:
          name: Show tests coverage report
          command: cd app/server && coverage report -m

  deploy:
    docker:
      - image: cimg/gcp:2024.08
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Run deploy.sh script
          command: |
            echo ${GCP_PROJECT_KEY_BASE64_ENCODED} | base64 --decode --ignore-garbage > $HOME/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=$HOME/gcloud-service-key.json

            cd ./app && ./deploy.sh ${GCP_PROJECT_ID}
      # - run:
      #     name: Purge cache
      #     command: |
      #       curl -X POST "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/purge_cache" \
      #         -H "Authorization: Bearer ${CF_CACHE_CLEANER_API_TOKEN}" \
      #         -H "Content-Type: application/json" \
      #         --data '{"purge_everything":true}'

workflows:
  version: 2
  build:
    jobs:
      - deploy
    # jobs:
    #   - run_tests
    #   - deploy:
    #       requires:
    #         - run_tests
    #       filters:
    #         branches:
    #           only:
    #             - master
